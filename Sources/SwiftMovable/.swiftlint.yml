# By default, SwiftLint uses a set of sensible default rules you can adjust:
disabled_rules: # rule identifiers turned on by default to exclude from running
#  - colon
#  - comma
#  - control_statement
  - trailing_comma
#  - trailing_whitespace
opt_in_rules: # some rules are turned off by default, so you need to opt-in
  - empty_count # find all the available rules by running: `swiftlint rules`
  - direct_return
  - empty_string
  - explicit_init
  - modifier_order
  - multiline_arguments
  - multiline_arguments_brackets
  - multiline_literal_brackets
  - multiline_parameters
  - no_extension_access_modifier
  - superfluous_else
  - toggle_bool
  - unneeded_parentheses_in_closure_argument
  - vertical_parameter_alignment_on_call
  - switch_case_on_newline
#  - sorted_enum_cases
#  - type_contents_order
#  - one_declaration_per_file
  - private_swiftui_state
  - yoda_condition
  - self_binding
  - redundant_nil_coalescing
  - prefer_zero_over_explicit_init
  - period_spacing
  - collection_alignment
  - sorted_imports
#  - required_deinit
#  - multiline_parameters_brackets
#  - explicit_top_level_acl

# Alternatively, specify all rules explicitly by uncommenting this option:
# only_rules: # delete `disabled_rules` & `opt_in_rules` if using this
#   - empty_parameters
#   - vertical_whitespace

analyzer_rules: # rules run by `swiftlint analyze`
  - explicit_self
  - unused_declaration
  - unused_import

# Case-sensitive paths to include during linting. Directory paths supplied on the
# command line will be ignored.
included:
  - Sources
excluded: # case-sensitive paths to ignore during linting. Takes precedence over `included`
  - Carthage
  - Pods
  - Sources/ExcludedFolder
  - Sources/ExcludedFile.swift
  - Sources/*/ExcludedFile.swift # exclude files with a wildcard

# If true, SwiftLint will not fail if no lintable files are found.
allow_zero_lintable_files: false

# If true, SwiftLint will treat all warnings as errors.
strict: false

# The path to a baseline file, which will be used to filter out detected violations.
baseline: Baseline.json

# The path to save detected violations to as a new baseline.
write_baseline: Baseline.json

# configurable rules can be customized from this configuration file
# binary rules can set their severity level
force_cast: warning # implicitly
force_try:
  severity: warning # explicitly
# rules that have both warning and error levels, can set just the warning level
# implicitly
line_length: 140
# they can set both implicitly with an array
type_body_length:
  - 300 # warning
  - 400 # error
# or they can set both explicitly
file_length:
  warning: 500
  error: 1200
# naming rules can set warnings/errors for min_length and max_length
# additionally they can set excluded names
type_name:
  min_length: 4 # only warning
  max_length: # warning and error
    warning: 40
    error: 50
  excluded: iPhone # excluded via string
  allowed_symbols: ["_"] # these are allowed in type names
identifier_name:
  min_length: # only min_length
    warning: 3 # only error
    error: 2
  excluded: # excluded via string array
    - id
    - URL
    - GlobalAPIKey
    - vm
reporter: "xcode" # reporter type (xcode, json, csv, checkstyle, codeclimate, junit, html, emoji, sonarqube, markdown, github-actions-logging, summary)
